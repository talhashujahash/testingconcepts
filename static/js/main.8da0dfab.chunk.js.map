{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","console","log","chang","e","name","map","v","s","t","onClick","Component","Root","children","useState","state","useEffect","checked","setChecked","React","Children","child","clone","cloneElement","props","CheckBox","type","Label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAwEMA,E,uKAEJ,WACEC,QAAQC,IAAI,MAAO,M,gCAErB,WACED,QAAQC,IAAI,OAAQ,O,oBAEtB,WACE,IAAMC,EAAQ,SAACC,GAAD,OAAOH,QAAQC,IAAIE,IACjC,OAAQ,qCAEL,CAAC,CAAEC,KAAM,QAAU,CAAEA,KAAM,UAAWC,KAAI,SAACC,GAAD,OAAO,6BAAKA,EAAEF,UACzD,eAAC,EAAD,WAEG,CAAC,OAAQ,OAAQ,MAAO,OAAOC,KAAI,SAACE,EAAGC,GAAJ,OAAU,qBAAKC,QAASP,EAAd,SAAuBK,OAErE,cAAC,EAAD,IACA,cAAC,EAAD,6B,GAlBUG,aAuBlBV,QAAQC,IAAIF,GACGA,QAETY,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACbC,oBAAS,kBAAM,KAAxBC,EADsB,oBAG7BC,qBAAU,WACRf,QAAQC,IAAI,YAAaa,KACxB,CAACA,IALyB,MAOCD,oBAAS,GAPV,mBAOtBG,EAPsB,KAObC,EAPa,KAQ7B,OAAOC,IAAMC,SAASd,IAAIO,GAAU,SAACQ,GACnC,IAAMC,EAAQH,IAAMI,aAAaF,EAAO,CAAEJ,UAASC,eAEnD,OADAjB,QAAQC,IAAIoB,EAAME,OACXF,MAGLG,EAAW,SAAC,GAA6B,IAA3BR,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC3B,OAAO,uBAAOD,QAASA,EAASP,QAAS,kBAAMQ,GAAYD,IAAUS,KAAK,cAE5EzB,QAAQC,IAAIuB,GACZ,IAAME,EAAQ,SAAC,GAA6B,IAA3BV,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACxB,OAAO,uBAAOR,QAAS,kBAAMQ,GAAYD,IAAlC,sBCzGMW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8da0dfab.chunk.js","sourcesContent":["// import \"./App.css\";\n// // import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// // import Setting from \"./components/ShopDetail\";\n// // import Terms from \"./components/Terms&Cond\";\n// // import Adsetting from \"./components/Addsetting\";\n// // import Head from \"./components/header\";\n// // import Navbar from \"./components/navbar\";\n// // import Contactus from \"./components/Contact us\";\n// // import queryString from 'query-string'\n// // import axios from \"axios\";\n// import { Component } from \"react\";\n// import 'antd/dist/antd.css';\n\n// // getting shop url \n//   // const value = queryString.parse(window.location.href);\n//   // export const shop = value.shop\n\n\n// class App extends Component {\n//   constructor(props) {\n//     super();\n//     this.state = {\n//       status: ''\n//     }\n//   }\n\n//   //getting status for the shop (\"Approved or disapproved \") from shopify backend\n//   // componentWillMount() {\n//   //   axios\n//   //     .get(\n//   //       `${process.env.REACT_APP_BACKEND_URL}/shop_details?shop=${shop}`,\n//   //       { headers: { Authorization: process.env.REACT_APP_TOKEN } }\n//   //     )\n//   //     .then((res) => {\n\n//   //       if (res.data.shop_details[0]?.status !== undefined) {\n//   //         this.setState({ status: res.data.shop_details[0]?.status })\n//   //       }\n//   //     })\n//   // }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <Router>\n//           <Head />\n//           <Switch>\n//             <Route exact path=\"/\">\n//               <Setting status={this.state.status} shop={shop} />\n//             </Route>\n//             <Route path=\"/termscond\">\n//               <Navbar status={this.state.status} />\n//               <Terms shop={shop} on={false} />\n//             </Route>\n//             <Route path=\"/setting\">\n//               <Navbar status={this.state.status} />\n//               <Adsetting shop={shop} />\n//             </Route>\n//             <Route path=\"/contactus\">\n//               <Navbar status={this.state.status} />\n//               <Contactus shop={shop} />\n//             </Route>\n//           </Switch>\n//         </Router>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nimport React, { Component, useState, useEffect } from \"react\";\n\nclass App extends Component {\n\n  componentDidMount() {\n    console.log(\"did\", 55)\n  }\n  componentWillMount() {\n    console.log(\"will\", 515)\n  }\n  render() {\n    const chang = (e) => console.log(e);\n    return (<>\n\n      {[{ name: \"test\" }, { name: \"te1st\" }].map((v) => <h1>{v.name}</h1>)}\n      <Root>\n\n        {[\"aaaa\", \"aaaa\", \"aba\", \"aca\"].map((s, t) => <div onClick={chang} >{s}</div>)}\n\n        <CheckBox />\n        <Label>test</Label>\n      </Root>\n    </>)\n  }\n}\nconsole.log(App);\nexport default App;\n\nconst Root = ({ children }) => {\n  const [state] = useState(() => 5)\n\n  useEffect(() => {\n    console.log(\"useeffect\", state);\n  }, [state])\n\n  const [checked, setChecked] = useState(false)\n  return React.Children.map(children, (child) => {\n    const clone = React.cloneElement(child, { checked, setChecked })\n    console.log(clone.props);\n    return clone\n  })\n}\nconst CheckBox = ({ checked, setChecked }) => {\n  return <input checked={checked} onClick={() => setChecked(!checked)} type=\"checkbox\"></input>\n}\nconsole.log(CheckBox)\nconst Label = ({ checked, setChecked }) => {\n  return <label onClick={() => setChecked(!checked)}>checked</label>\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}