{"version":3,"sources":["App.js","reportWebVitals.js","registerServiceWorker.js","index.js"],"names":["App","name","map","v","s","t","onClick","e","console","log","Component","Root","children","useState","checked","setChecked","React","Children","child","cloneElement","CheckBox","type","Label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6PA2FeA,E,4JAhBb,WAEE,OAAQ,qCAEL,CAAC,CAAEC,KAAM,QAAU,CAAEA,KAAM,UAAWC,KAAI,SAACC,GAAD,OAAO,6BAAKA,EAAEF,UACzD,eAAC,EAAD,WAEG,CAAC,OAAQ,OAAQ,MAAO,OAAOC,KAAI,SAACE,EAAGC,GAAJ,OAAU,qBAAKC,QAAS,kBANjDC,EAM6DF,EANvDG,QAAQC,IAAIF,GAAnB,IAACA,GAMmC,SAAgCH,OAE9E,cAAC,EAAD,IACA,cAAC,EAAD,6B,GAbUM,aAqBZC,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAECC,oBAAS,GAFV,mBAEtBC,EAFsB,KAEbC,EAFa,KAG7B,OAAOC,IAAMC,SAASf,IAAIU,GAAU,SAACM,GAGnC,OAFcF,IAAMG,aAAaD,EAAO,CAAEJ,UAASC,mBAKjDK,EAAW,SAAC,GAA6B,IAA3BN,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC3B,OAAO,uBAAOD,QAASA,EAASR,QAAS,kBAAMS,GAAYD,IAAUO,KAAK,cAGtEC,EAAQ,SAAC,GAA6B,IAA3BR,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACxB,OAAO,uBAAOT,QAAS,kBAAMS,GAAYD,IAAlC,sBC/FMS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTb,MAAK,SAAAiB,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbR,UAAUC,cAAcQ,WAKxBzC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/ByC,OAAM,SAAAC,GACH3C,QAAQ2C,MAAM,4CAA6CA,MCxEvEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjC,IDGe,WACX,GAA6C,kBAAmBiB,UAAW,CAGvE,GADkB,IAAIiB,IAAIC,mBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIrC,OAGJzB,OAAO0B,iBAAiB,QAAQ,WAC5B,IAAMrB,EAAK,UAAMmB,mBAAN,sBAEP1B,IAiDhB,SAAiCO,GAE7BsB,MAAMtB,GACDb,MAAK,SAAAoC,GAGsB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMzC,MAAK,SAAAiB,GAC/BA,EAAayB,aAAa1C,MAAK,WAC3BQ,OAAOC,SAASkC,eAKxB/B,EAAgBC,MAGvBW,OAAM,WACH1C,QAAQC,IACJ,oEArEA6D,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMzC,MAAK,WAC/BlB,QAAQC,IACJ,gHAMR6B,EAAgBC,OC9BhCgC,K","file":"static/js/main.dc8fece5.chunk.js","sourcesContent":["// import \"./App.css\";\n// // import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// // import Setting from \"./components/ShopDetail\";\n// // import Terms from \"./components/Terms&Cond\";\n// // import Adsetting from \"./components/Addsetting\";\n// // import Head from \"./components/header\";\n// // import Navbar from \"./components/navbar\";\n// // import Contactus from \"./components/Contact us\";\n// // import queryString from 'query-string'\n// // import axios from \"axios\";\n// import { Component } from \"react\";\n// import 'antd/dist/antd.css';\n\n// // getting shop url \n//   // const value = queryString.parse(window.location.href);\n//   // export const shop = value.shop\n\n\n// class App extends Component {\n//   constructor(props) {\n//     super();\n//     this.state = {\n//       status: ''\n//     }\n//   }\n\n//   //getting status for the shop (\"Approved or disapproved \") from shopify backend\n//   // componentWillMount() {\n//   //   axios\n//   //     .get(\n//   //       `${process.env.REACT_APP_BACKEND_URL}/shop_details?shop=${shop}`,\n//   //       { headers: { Authorization: process.env.REACT_APP_TOKEN } }\n//   //     )\n//   //     .then((res) => {\n\n//   //       if (res.data.shop_details[0]?.status !== undefined) {\n//   //         this.setState({ status: res.data.shop_details[0]?.status })\n//   //       }\n//   //     })\n//   // }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <Router>\n//           <Head />\n//           <Switch>\n//             <Route exact path=\"/\">\n//               <Setting status={this.state.status} shop={shop} />\n//             </Route>\n//             <Route path=\"/termscond\">\n//               <Navbar status={this.state.status} />\n//               <Terms shop={shop} on={false} />\n//             </Route>\n//             <Route path=\"/setting\">\n//               <Navbar status={this.state.status} />\n//               <Adsetting shop={shop} />\n//             </Route>\n//             <Route path=\"/contactus\">\n//               <Navbar status={this.state.status} />\n//               <Contactus shop={shop} />\n//             </Route>\n//           </Switch>\n//         </Router>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nimport React, { Component, useState } from \"react\";\n\nclass App extends Component {\n\n\n  render() {\n    const chang = (e) => console.log(e);\n    return (<>\n\n      {[{ name: \"test\" }, { name: \"te1st\" }].map((v) => <h1>{v.name}</h1>)}\n      <Root>\n\n        {[\"aaaa\", \"aaaa\", \"aba\", \"aca\"].map((s, t) => <div onClick={() => chang(t)} >{s}</div>)}\n\n        <CheckBox />\n        <Label>test</Label>\n      </Root>\n    </>)\n  }\n}\n\nexport default App;\n\nconst Root = ({ children }) => {\n\n  const [checked, setChecked] = useState(false)\n  return React.Children.map(children, (child) => {\n    const clone = React.cloneElement(child, { checked, setChecked })\n\n    return clone\n  })\n}\nconst CheckBox = ({ checked, setChecked }) => {\n  return <input checked={checked} onClick={() => setChecked(!checked)} type=\"checkbox\"></input>\n}\n\nconst Label = ({ checked, setChecked }) => {\n  return <label onClick={() => setChecked(!checked)}>checked</label>\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nregisterServiceWorker();\n"],"sourceRoot":""}